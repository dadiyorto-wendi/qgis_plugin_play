# -*- coding: utf-8 -*-
"""
/***************************************************************************
 HydrologicalAnalysisToolDockWidget
                                 A QGIS plugin
 Timeseries analysis of hydrological simulations and observations
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-07-11
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Sam Murphy / ECMWF
        email                : sam.murphy@ecmwf.int
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

import xarray as xr
from matplotlib.backends.backend_qt5agg import \
    FigureCanvasQTAgg as FigureCanvas
from PyQt5.QtWidgets import QVBoxLayout
from qgis.core import Qgis, QgsMessageLog, QgsProject, QgsVectorLayer
from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
from qgis.PyQt.QtWidgets import QMessageBox

from graphs import graph_sims_and_obs_matplotlib

FORM_CLASS, _ = uic.loadUiType(
    os.path.join(
        os.path.dirname(__file__), "hydrological_analysis_tool_dockwidget_base.ui"
    )
)

HOME = os.path.expanduser("~")


class HydrologicalAnalysisToolDockWidget(QtWidgets.QDockWidget, FORM_CLASS):
    closingPlugin = pyqtSignal()

    def __init__(self, iface, parent=None):
        """Constructor."""
        super(HydrologicalAnalysisToolDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.iface = iface

        # event handlers
        self.loadGeoJsonButton.clicked.connect(self.onLoadGeoJsonButtonClicked)
        self.loadNetCdfButton.clicked.connect(self.onLoadNetCdfButtonClicked)

        # read default obs and sims
        self.onLoadNetCdfButtonClicked()

        self.station_id = "G7062"

        # Create the Matplotlib figure and axes
        fig = graph_sims_and_obs_matplotlib(self.sims, self.obs, self.station_id)

        # Create the canvas with the figure
        self.canvas = FigureCanvas(fig)

        # Create a layout and add the canvas to it
        layout = QVBoxLayout()

        layout.addWidget(self.canvas)

        # Set this layout to the plotWidget
        self.plotWidget.setLayout(layout)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def getFilePath(self, lineEdit):
        """read filepath from specific lineEdit object"""
        filepath = lineEdit.text()
        return filepath

    def onLoadGeoJsonButtonClicked(self):
        filepath = os.path.join(HOME, self.getFilePath(self.station_fpath_ui))

        if not os.path.exists(filepath):
            QgsMessageLog.logMessage(
                f"Filepath does not exist: {filepath}", "my plugin", Qgis.Critical
            )
            QMessageBox.warning(
                self,
                "Filepath does not exist",
                "Please check the file path and try again.",
            )
            return

        # Create the QgsVectorLayer object
        layer = QgsVectorLayer(filepath, "My GeoJSON Layer", "ogr")

        # Otherwise, add the layer to the current project
        QgsProject.instance().addMapLayer(layer)

    def onLoadNetCdfButtonClicked(self):
        obs_fpath = os.path.join(HOME, self.getFilePath(self.obs_fpath_ui))
        sims_fpath = os.path.join(HOME, self.getFilePath(self.sims_fpath_ui))

        if not os.path.exists(obs_fpath) or not os.path.exists(sims_fpath):
            QgsMessageLog.logMessage(
                "Filepath does not exist", "my plugin", Qgis.Critical
            )
            QMessageBox.warning(
                self,
                "Filepath does not exist",
                "Please check the file paths and try again.",
            )
            return

        self.obs = xr.open_dataset(obs_fpath)
        self.sims = xr.open_dataset(sims_fpath)